// Take a character and a list of permutation characters, return index
// of first perm character containing chr
function firstip(chr, pc)
  cnt:=1;
  while InnerProduct(chr, pc[cnt]) eq 0 do cnt:=cnt+1; end while;
  return cnt;
end function;

// return a pair from Transitive identification
// if the degree is too big, just return t=0
function myti(g,sub)
  if Index(g,sub) gt 47 then
    return [Index(g,sub),0];
  end if;
  a,b := TransitiveGroupIdentification(CosetImage(g,sub));
  return [b,a];
end function;

// Minimal n,t where a character
//   g is the group
function minnt(g,chr)
  s:= SubgroupClasses(g);
  Sort(~s, func<x,y | y`order-x`order>);
  pc := [ PermutationCharacter(g,z`subgroup) : z in s];
  return myti(g,s[firstip(chr,pc)]`subgroup);
end function;

// Partition artin representations by Galois orbits

function galorbs(ars)
  ct:=[Character(a) : a in ars];
  go:=<GaloisOrbit(c) : c in ct>;
  go:=< [Position(ct,j) : j in g] : g in go>;
  go:= {Sort(g) : g in go};
  go:= [* g : g in go *];
  // Now dance around sorting
  gos:=[g[1] : g in go];
  Sort(~gos, ~P);
  ids := [1..#go];
  ids := PermuteSequence(ids, P);
  go := <go[j] : j in ids>;
  return go;
end function;

function labelcount(lab)
  lab1 := Substring(lab, 1, 4);
  thisfile:=artlabeldir*lab1;
  A := AssociativeArray();
  try
    for line in Split(Read(thisfile)) do
      ll,cnt := Explode(Split(line," "));
      A[ll] := eval cnt;
    end for;
    if IsDefined(A, lab) then
      A[lab] +:= 1;
    else
      A[lab] := 1;
    end if;
    count := A[lab];
  catch e
    A[lab] := 1;
    count := 1;
  end try;
  Rewrite(thisfile);
  for k in Keys(A) do
    Write(thisfile, Sprintf("%o %o", k, A[k]));
  end for;
  return count;
end function;

function smallsibs(n,t)
  g:= TransitiveGroup(n,t);
  gord:= Order(g);
  s:= SubgroupClasses(g);
  s:= <h : h in s | Order(g)/h`order lt 24>;
  s:= <h : h in s | Order(Core(g,h`subgroup)) eq 1>;
  inds:= [gord/h`order : h in s];
  m1 := Min(inds);
  m2:= Multiplicity(inds,m1);
  if m1 lt n then return m1; end if;
  if (m1 eq n) and (m2 gt 1) then return -1; end if;
  return 0;
end function;

/*
Use with
res:=[[smallsibs(n,t) : t in [1..NumberOfTransitiveGroups(n)]] : n in [1..15]];
*/

/* for sorting below */
function ptcmp(a,b)
  if a[2] ne b[2] then return a[2]-b[2]; end if;
  if a[1] gt b[1] then return 1; end if;
  if a[1] lt b[1] then return -1; end if;
  return 0;
end function;

/* All same degree siblings of a given polynomial */
function alltwins(f: deg:=-1)
  R<x> := PolynomialRing(Rationals());
  n := Degree(f);
  d := deg eq -1 select n else deg;
  G,r,S := GaloisGroup(f);
  order := Order(G) div d;
  ss:= Subgroups(G : OrderEqual:=order);
  ss:= [s : s in ss | Order(Core(G, s`subgroup)) eq 1];
  pols := <R ! DefiningPolynomial(NumberField( GaloisSubgroup(S, z`subgroup))) : z in ss>;
  pols := [PolRedAbs(g) : g in pols];
  dat := [[TransitiveGroupIdentification(GaloisGroup(z)),
    Abs(Discriminant(IntegerRing(NumberField(z))))] cat Coefficients(z) : z in pols];
  Sort(~dat,~P);
  pols := PermuteSequence(pols, P);
  //pols := [<z,TransitiveGroupIdentification(GaloisGroup(z))> : z in pols];
  //pols := Sort(pols, ptcmp);
  //return [z[1] : z in pols];
  return pols;
end function;

/* twindata[n,t] tells us about nTt with
   0: no low degree siblings
   1: there is a lower degree sibling
   2: there are same degree siblings

   Currently goes through degree 15
*/
twindata:= [[ 0 ], [ 0 ], [ 0, 0 ], [ 0, 0, -1, 0, 0 ], [ 0, 0, 0, 0, 0 ],
    [ 0, 3, -1, 4, 0, 0, 4, 4, 0, -1, -1, 5, -1, 5, -1, -1 ],
    [ 0, 0, 0, 0, -1, 0, 0 ],
    [ 0, 0, 0, 4, 0, -1, 0, 0, -1, -1, -1, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 7, -1, -1, -1, -1, 
    0, 0, -1, 0, 0, 0, -1, 0, 0 ],
    [ 0, 0, 0, 6, 0, 0, -1, 6, 6, 0, -1, -1, -1, 0, 0, 6, -1, -1, 0, -1, -1, -1,
    0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    [ 0, 5, -1, 5, -1, -1, 5, -1, -1, -1, 0, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 6, -1, 0, -1, 0, 0, 6, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 
    0, 0, 0 ],
    [ 0, 0, 0, 0, -1, 0, 0, 0 ],
    [ 0, 0, 6, 4, 0, 6, 6, 4, 4, -1, -1, -1, -1, -1, -1, 6, 6, 0, 0, -1, 6, 6, 
    6, 6, -1, -1, -1, -1, 0, -1, -1, -1, 5, 6, 6, 6, -1, -1, -1, -1, -1, -1, 0, 
    -1, 0, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1, 
    -1, -1, 8, 8, 8, 8, 0, 0, -1, -1, 5, 10, 10, -1, -1, -1, -1, -1, -1, 0, 9, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 8, 8, 8, 8, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 9, 10, 
    -1, -1, 8, -1, 8, 8, -1, -1, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 0, 8, 8, 8, 8, -1,
    8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 11, -1, 10, 10, 6, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 0, 
    0, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, 0, -1, 10, -1, -1, -1, -1,
    -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, 
    -1, -1, 0, -1, -1, -1, 10, -1, -1, 11, 0, -1, 0, 0, 0, 10, 10, 0, -1, 0, 0, 
    0, -1, -1, -1, 10, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, -1,0,0 ],
    [ 0, 0, 0, 0, 0, 0, -1, 0, 0 ],
    [ 0, 7, -1, 7, 0, 8, -1, -1, 0, 7, 8, -1, -1, -1, 0, 8, -1, 0, -1, -1, -1, 
    0, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, -1, 8, 0, 0, 0, -1, 0, -1, -1, -1, 
    -1, 0, 0, 7, 0, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1,0,0,0,0,0,0 ],
    [ 0, 0, 0, 0, 5, 0, 0, 0, -1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 
    -1, 0, 0, -1, -1, -1, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
    -1, -1, -1, -1, -1, 7, 0, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, 
    0, -1, 0, 0, 0, 0, -1, 0, 0, 8, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, -1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[ 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, 0, 8, 
-1, -1, -1, 0, 8, -1, -1, -1, -1, 8, -1, 8, 8, -1, 8, 8, 0, 8, 8, -1, -1, 8, 
8, -1, -1, 0, -1, -1, 8, 8, -1, 0, -1, 12, 12, 0, 0, 6, 12, 12, 12, 0, 8, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0,
-1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 8, 8, 8, 
8, -1, 0, -1, -1, 8, 0, -1, -1, -1, -1, 8, 8, 8, -1, -1, -1, 8, -1, 8, 8, -1, 
8, -1, -1, -1, 0, 8, 8, 8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8, 8, -1, -1,
-1, -1, -1, 10, 12, -1, 12, 12, 8, 0, 12, 12, -1, -1, -1, -1, 12, -1, 12, 8, 12,
14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 

-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 0, 12, 10, 14, 8, 14, 0, -1, -1, -1, 12, -1, -1, -1, -1, 12, 12, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 12, 8, 12, -1, 0, -1, 8, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, -1, 8, 8, 8, 0, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, 14, 0, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 0, 8, 12, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 12, 12, 12, 12, 12, 12, -1, -1, 0, 14, -1, 14, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 0, 0, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 8, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, -1 ]
];

